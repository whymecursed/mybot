import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.filters import Command
from aiohttp import web

TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID"))
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL")
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

user_data = {}

# --- /start ---
@dp.message(Command("start"))
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"), types.KeyboardButton(text="üá¨üáß English")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ / Choose your language:", reply_markup=keyboard)

# --- –í—ã–±–æ—Ä —è–∑—ã–∫–∞ ---
@dp.message(lambda msg: msg.text in ["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¨üáß English"])
async def ask_name(message: types.Message):
    lang = "ru" if "–†—É—Å—Å–∫–∏–π" in message.text else "eng"
    user_data[message.from_user.id] = {"lang": lang}
    text = "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?" if lang == "ru" else "What's your name?"
    await message.answer(text, reply_markup=types.ReplyKeyboardRemove())

# --- –ò–º—è ---
@dp.message(lambda msg: msg.from_user.id in user_data and "name" not in user_data[msg.from_user.id])
async def ask_age(message: types.Message):
    user_data[message.from_user.id]["name"] = message.text
    lang = user_data[message.from_user.id]["lang"]
    text = "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?" if lang == "ru" else "How old are you?"
    await message.answer(text)

# --- –í–æ–∑—Ä–∞—Å—Ç ---
@dp.message(lambda msg: msg.from_user.id in user_data and "age" not in user_data[msg.from_user.id])
async def ask_city(message: types.Message):
    user_data[message.from_user.id]["age"] = message.text
    lang = user_data[message.from_user.id]["lang"]
    text = "–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?" if lang == "ru" else "Which city are you from?"
    await message.answer(text)

# --- –ì–æ—Ä–æ–¥ ---
@dp.message(lambda msg: msg.from_user.id in user_data and "city" not in user_data[msg.from_user.id])
async def finish_registration(message: types.Message):
    user = message.from_user
    data = user_data[message.from_user.id]
    data["city"] = message.text

    text = (
        f"üì® –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\n"
        f"üë§ –ò–º—è: {data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data.get('age', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üèô –ì–æ—Ä–æ–¥: {data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üåê –Ø–∑—ã–∫: {data.get('lang', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üîó Username: @{user.username or '–Ω–µ—Ç'}\n"
        f"üÜî Telegram ID: {user.id}"
    )

    await bot.send_message(OWNER_ID, text)

    # –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    lang = data["lang"]
    success_text = "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å." if lang == "ru" else "‚úÖ You have successfully registered."
    await message.answer(success_text)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–æ–ø—Ä–æ—Å—É
    ask_text = "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:" if lang == "ru" else "Please ask your question:"
    await message.answer(ask_text)

    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∂–¥—ë–º –≤–æ–ø—Ä–æ—Å
    user_data[message.from_user.id]["awaiting_question"] = True


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ ---
@dp.message(lambda msg: msg.from_user.id in user_data and user_data[msg.from_user.id].get("awaiting_question"))
async def handle_question(message: types.Message):
    user = message.from_user
    data = user_data[message.from_user.id]
    lang = data["lang"]

    question_text = (
        f"‚ùì –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username or '–Ω–µ—Ç'}\n\n"
        f"üó£ –ò–º—è: {data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data.get('age', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üèô –ì–æ—Ä–æ–¥: {data.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üí¨ –í–æ–ø—Ä–æ—Å:\n{message.text}"
    )
    await bot.send_message(OWNER_ID, question_text)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    error_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." if lang == "ru" else "‚ö†Ô∏è Error. Please try again later."
    await message.answer(error_text)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    del user_data[message.from_user.id]

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π ---
@dp.message(lambda msg: msg.from_user.id in user_data and "city" not in user_data[msg.from_user.id] and "awaiting_question" not in user_data[msg.from_user.id])
async def incomplete_data_handler(message: types.Message):
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Å—Ç–∞–ª –≤–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü—É."""
    user = message.from_user
    data = user_data[message.from_user.id]
    data.setdefault("name", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    data.setdefault("age", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    data.setdefault("city", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")

    text = (
        f"‚ö†Ô∏è –ù–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"üèô –ì–æ—Ä–æ–¥: {data['city']}\n"
        f"üåê –Ø–∑—ã–∫: {data.get('lang', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üîó Username: @{user.username or '–Ω–µ—Ç'}\n"
        f"üÜî Telegram ID: {user.id}"
    )
    await bot.send_message(OWNER_ID, text)
    await message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å." if data["lang"] == "ru" else "‚úÖ You have successfully registered.")
    ask_text = "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:" if data["lang"] == "ru" else "Please ask your question:"
    await message.answer(ask_text)
    user_data[message.from_user.id]["awaiting_question"] = True


# --- Webhook ---
async def on_startup(app: web.Application):
    await bot.set_webhook(WEBHOOK_URL)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def on_shutdown(app: web.Application):
    await bot.delete_webhook()
    print("üõë Webhook —É–¥–∞–ª—ë–Ω")

def main():
    app = web.Application()
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))

if __name__ == "__main__":
    asyncio.run(main())
